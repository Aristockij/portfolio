@use "sass:math";

@mixin box-sizing($value: border-box) {
  -webkit-box-sizing: $value;
  -moz-box-sizing: $value;
  box-sizing: $value;
}

@mixin placeholder {

  $placeholders: ":-webkit-input" ":-moz" "-moz" "-ms-input";
  @each $placeholder in $placeholders {
    &:#{$placeholder}-placeholder {
      @content;
    }
  }
}

@mixin opacity($opacity: 1) {
  opacity: $opacity;
  filter: alpha(opacity=$opacity * 100);
}

@mixin clearfix() {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

@mixin column-break-inside($value: avoid, $value2: avoid-column) {
  -webkit-column-break-inside: $value;
  -moz-column-break-inside: $value;
  -o-column-break-inside: $value;
  -ms-column-break-inside: $value;
  column-break-inside: $value;
  break-inside: $value2;
}

@mixin margin-top($value) {
  margin-top: $value;

  &:first-child {
    margin-top: 0;
  }
}

@mixin grid-container($horz: null) {
  @include clearfix;

  @if $horz {

    $hleft: nth($horz, 1);
    $hright: $hleft;

    @if length($horz) > 1 {
      $hright: nth($horz, 2);
    }

    @if is-size($hleft) {
      margin-left: $hleft;
    } @else {
      @warn "`#{$hleft}` is not a valid length for the top `$horz` parameter in the `grid-container` mixin.";
    }

    @if is-size($hright) {
      margin-right: $hright;
    } @else {
      @warn "`#{$hright}` is not a valid length for the bottom `$horz` parameter in the `grid-container` mixin.";
    }

  }
  @else
  {
    margin-left: -1*map-get($grid, gutter)*0.5;
    margin-right: -1*map-get($grid, gutter)*0.5;
  }
}

@mixin grid-inner($reset-font: false, $vert: null) {
  float: left;
  width: 100%;

  @if $vert {

    $vtop: nth($vert, 1);
    $vbottom: $vtop;

    @if length($vert) > 1 {
      $vbottom: nth($vert, 2);
    }

    @if is-size($vtop) {
      margin-top: -1*$vtop;
    } @else {
      @warn "`#{$vtop}` is not a valid length for the top `$vert` parameter in the `grid-inner` mixin.";
    }

    @if is-size($vbottom) {
      margin-bottom: -1*$vbottom;
    } @else {
      @warn "`#{$vbottom}` is not a valid length for the bottom `$vert` parameter in the `grid-inner` mixin.";
    }

  }

  @if $reset-font {
    font-size: 0;
  }
}

@mixin grid-column($columns: 6, $vert: null, $horz: null, $type: "inline-block") {

  @if $type == "float" {
    float: left;
  }
  @else if $type == "table" {
    display: table-cell;
    vertical-align: top;
  }
  @else {
    display: inline-block;
    vertical-align: top;
  }

  width: math.div(100%*$columns, map-get($grid, columns));

  @if ($horz) {

    $hleft: nth($horz, 1);
    $hright: $hleft;

    @if length($horz) > 1 {
      $hright: nth($horz, 2);
    }

    @if is-size($hleft) {
      padding-left: $hleft;
    } @else {
      @warn "`#{$hleft}` is not a valid length for the top `$horz` parameter in the `grid-column` mixin.";
    }

    @if is-size($hright) {
      padding-right: $hright;
    } @else {
      @warn "`#{$hright}` is not a valid length for the bottom `$horz` parameter in the `grid-column` mixin.";
    }

  }
  @else
  {
    padding-left: map-get($grid, gutter)*0.5;
    padding-right: map-get($grid, gutter)*0.5;
  }

  @if $vert {

    $vtop: nth($vert, 1);
    $vbottom: $vtop;

    @if length($vert) > 1 {
      $vbottom: nth($vert, 2);
    }

    @if is-size($vtop) {
      padding-top: $vtop;
    } @else {
      @warn "`#{$vtop}` is not a valid length for the top `$vert` parameter in the `grid-column` mixin.";
    }

    @if is-size($vbottom) {
      padding-bottom: $vbottom;
    } @else {
      @warn "`#{$vbottom}` is not a valid length for the bottom `$vert` parameter in the `grid-column` mixin.";
    }

  }
}
$asset-pipeline: false !default;
@mixin font-face(
  $font-family,
  $file-path,
  $weight: normal,
  $style: normal,
  $asset-pipeline: $asset-pipeline,
  $file-formats: eot woff2 woff ttf svg) {

  $user-deprecation-warnings-setting: $output-bourbon-deprecation-warnings;
  $output-bourbon-deprecation-warnings: false !global;

  $font-url-prefix: font-url-prefixer($asset-pipeline);

  @font-face {
    font-family: $font-family;
    font-style: $style;
    font-weight: $weight;

    src: font-source-declaration(
                    $font-family,
                    $file-path,
                    $asset-pipeline,
                    $file-formats,
                    $font-url-prefix
    );
  }

  $output-bourbon-deprecation-warnings: $user-deprecation-warnings-setting !global;
}